name: "Deploy to staging"
on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.18.0]
    name: Deploy to staging with Node ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci --quiet
      - name: Build project
        run: npm run build
      - name: Create .env.local file
        run: |
          cp .env.example .env.local
          sed -i 's/<SMTP_USER>/${{ secrets.SMTP_USER }}/g' .env.local
          sed -i 's/<SMTP_PASS>/${{ secrets.SMTP_PASS }}/g' .env.local
          sed -i 's/<BASIC_AUTH_USER>/${{ secrets.BASIC_AUTH_USER }}/g' .env.local
          sed -i 's/<BASIC_AUTH_PASS>/${{ secrets.BASIC_AUTH_PASS }}/g' .env.local
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-errors"
      - name: Adding known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      - name: Set release date as env variable
        run: echo "RELEASE=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
      - name: Set application directory as env variable
        run: echo "APP_DIR=/home/rozmowni/rails" >> $GITHUB_ENV
      - name: Set application releases directory as env variable
        run: echo "RELEASES_DIR=/home/rozmowni/rails/rozmowni_staging_releases" >> $GITHUB_ENV
      - name: Set symlink name as env variable
        run: echo "SYMLINK_NAME=rozmowni_staging" >> $GITHUB_ENV
      - name: Create app archive
        run: tar --exclude=".git" --exclude=".github" -zcf app_${{ env.RELEASE }}.tar.gz * .??*
      - name: Upload app archive to server
        run: rsync -av ./app_${{ env.RELEASE }}.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/rozmowni
      - name: Switch app on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}
            mv ~/app_${{ env.RELEASE }}.tar.gz ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}
            tar -xf ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}/app_${{ env.RELEASE }}.tar.gz -C ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}
            rm ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}/app_${{ env.RELEASE }}.tar.gz
            rm ${{ env.APP_DIR }}/${{ env.SYMLINK_NAME }}
            ln -s ${{ env.RELEASES_DIR }}/${{ env.RELEASE }} ${{ env.APP_DIR }}/${{ env.SYMLINK_NAME }}
            ln -s ${{ env.APP_DIR }}/shared ${{ env.APP_DIR }}/${{ env.SYMLINK_NAME }}/public
            shopt -s extglob
            cd ${{ env.RELEASES_DIR }} && rm -rf !($(ls ${{ env.RELEASES_DIR }} -r | head -2 | tr '\n' '|'))
            mkdir -p ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}/tmp
            touch ${{ env.RELEASES_DIR }}/${{ env.RELEASE }}/tmp/restart.txt
